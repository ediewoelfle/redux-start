{"ast":null,"code":"var _jsxFileName = \"/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/src/screens/Devices.js\";\nimport React from \"react\";\nimport * as R from \"ramda\";\nimport { filter, reset, sort } from \"../redux/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nexport const Devices = () => {\n  const data = useSelector(state => state.dataReducer);\n  const devices = useSelector(state => state.devicesReducer);\n  const dispatch = useDispatch();\n  console.log(\"data\", data);\n  if (devices.length === 0) return null; // get a list of all the device properties we want to filter by\n\n  const firmwareVersions = R.uniq(devices.map(device => device.firmware_version));\n  const deviceIds = R.uniq(devices.map(device => device.device_id));\n\n  const renderFilterButton = (key, value) => {\n    return React.createElement(\"button\", {\n      key: value,\n      onClick: () => {\n        dispatch(filter(data, key, value));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, value);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    onClick: () => {\n      dispatch(reset(data));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"RESET\"), firmwareVersions.map(version => renderFilterButton(\"firmware_version\", version)), deviceIds.map(id => renderFilterButton(\"device_id\", id)), devices.length !== 0 && React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => {\n      dispatch(sort(devices, \"id\"));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"#\")), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Device Id\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Firmware\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => {\n      dispatch(sort(devices, \"date_device_available\"));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Date Available\")), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => {\n      dispatch(sort(devices, \"battery_level\"));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Battery Level\")), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => {\n      dispatch(sort(devices, \"internal_temperature\"));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Temp\")))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, devices.map(device => React.createElement(DeviceRow, {\n    key: device.id,\n    device: device,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  })))));\n};\n\nconst DeviceRow = device => {\n  const _device$device = device.device,\n        battery_level = _device$device.battery_level,\n        date_device_available = _device$device.date_device_available,\n        device_id = _device$device.device_id,\n        firmware_version = _device$device.firmware_version,\n        id = _device$device.id,\n        internal_temperature = _device$device.internal_temperature;\n  console.log(device);\n  return React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, id), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, device_id), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, firmware_version), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, date_device_available), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, battery_level), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, internal_temperature));\n};","map":{"version":3,"sources":["/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/src/screens/Devices.js"],"names":["React","R","filter","reset","sort","useSelector","useDispatch","Devices","data","state","dataReducer","devices","devicesReducer","dispatch","console","log","length","firmwareVersions","uniq","map","device","firmware_version","deviceIds","device_id","renderFilterButton","key","value","version","id","DeviceRow","battery_level","date_device_available","internal_temperature"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as R from \"ramda\";\n\nimport { filter, reset, sort } from \"../redux/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport const Devices = () => {\n  const data = useSelector(state => state.dataReducer);\n  const devices = useSelector(state => state.devicesReducer);\n  const dispatch = useDispatch();\n  console.log(\"data\", data);\n\n  if (devices.length === 0) return null;\n\n  // get a list of all the device properties we want to filter by\n\n  const firmwareVersions = R.uniq(\n    devices.map(device => device.firmware_version)\n  );\n\n  const deviceIds = R.uniq(devices.map(device => device.device_id));\n\n  const renderFilterButton = (key, value) => {\n    return (\n      <button\n        key={value}\n        onClick={() => {\n          dispatch(filter(data, key, value));\n        }}\n      >\n        {value}\n      </button>\n    );\n  };\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          dispatch(reset(data));\n        }}\n      >\n        RESET\n      </button>\n      {firmwareVersions.map(version =>\n        renderFilterButton(\"firmware_version\", version)\n      )}\n      {deviceIds.map(id => renderFilterButton(\"device_id\", id))}\n\n      {devices.length !== 0 && (\n        <table>\n          <thead>\n            <tr>\n              <th>\n                <button\n                  onClick={() => {\n                    dispatch(sort(devices, \"id\"));\n                  }}\n                >\n                  #\n                </button>\n              </th>\n              <th>Device Id</th>\n              <th>Firmware</th>\n              <th>\n                <button\n                  onClick={() => {\n                    dispatch(sort(devices, \"date_device_available\"));\n                  }}\n                >\n                  Date Available\n                </button>\n              </th>\n              <th>\n                <button\n                  onClick={() => {\n                    dispatch(sort(devices, \"battery_level\"));\n                  }}\n                >\n                  Battery Level\n                </button>\n              </th>\n              <th>\n                <button\n                  onClick={() => {\n                    dispatch(sort(devices, \"internal_temperature\"));\n                  }}\n                >\n                  Temp\n                </button>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {devices.map(device => (\n              <DeviceRow key={device.id} device={device} />\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n\nconst DeviceRow = device => {\n  const {\n    // application_code,\n    // asset_identifier,\n    battery_level,\n    date_device_available,\n    device_id,\n    firmware_version,\n    id,\n    internal_temperature\n    // manufacturer,\n    // status\n  } = device.device;\n\n  console.log(device);\n  return (\n    <tr>\n      <td>{id}</td>\n      <td>{device_id}</td>\n      <td>{firmware_version}</td>\n      <td>{date_device_available}</td>\n      <td>{battery_level}</td>\n      <td>{internal_temperature}</td>\n    </tr>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}