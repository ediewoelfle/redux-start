{"ast":null,"code":"import _objectSpread from \"/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { Login } from \"./screens/Login\";\nimport { Devices } from \"./screens/Devices\";\nimport * as R from \"ramda\";\nimport axios from \"axios\";\nimport { login } from \"./redux/actions\";\nconst url = \"http://localhost:3000/devices\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // holding for two arrays, one for display and one with the original data. Thinking of a better way to do this. --EdieDanger\n\n    this.state = {\n      data: null,\n      devices: null\n    };\n    this.sortBy = this.sortBy.bind(this);\n    this.login = this.login.bind(this);\n    this.filterBy = this.filterBy.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  reset() {\n    this.setState(_objectSpread({}, this.state, {\n      devices: this.state.data\n    }));\n  } // using ramda functions to sort the data by a key and save to the display array\n\n\n  sortBy(key) {\n    this.setState(_objectSpread({}, this.state, {\n      devices: R.sortBy(R.prop(key), this.state.devices)\n    }));\n  } // use this for the filter\n\n\n  filterBy(key, value) {\n    this.setState(_objectSpread({}, this.state, {\n      devices: R.filter(device => {\n        return device[key] === value;\n      }, this.state.data)\n    }));\n  } // basic login to retrieve data\n\n\n  login(values) {\n    const credentials = btoa(\"\".concat(values.username, \":\").concat(values.password));\n    axios.get(url, {\n      headers: {\n        authorization: \"Basic \".concat(credentials)\n      }\n    }).then(response => {\n      this.setState(_objectSpread({}, this.state, {\n        data: response.data,\n        devices: response.data\n      }));\n    }, error => {\n      alert(error);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, !this.state.data && React.createElement(Login, {\n      login: this.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(Devices, {\n      devices: this.state.devices,\n      sortBy: this.sortBy,\n      filterBy: this.filterBy,\n      reset: this.reset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/src/App.js"],"names":["React","Login","Devices","R","axios","login","url","App","Component","constructor","props","state","data","devices","sortBy","bind","filterBy","reset","setState","key","prop","value","filter","device","values","credentials","btoa","username","password","get","headers","authorization","then","response","error","alert","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { Login } from \"./screens/Login\";\nimport { Devices } from \"./screens/Devices\";\nimport * as R from \"ramda\";\nimport axios from \"axios\";\nimport { login } from \"./redux/actions\";\n\nconst url = \"http://localhost:3000/devices\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // holding for two arrays, one for display and one with the original data. Thinking of a better way to do this. --EdieDanger\n    this.state = {\n      data: null,\n      devices: null\n    };\n\n    this.sortBy = this.sortBy.bind(this);\n    this.login = this.login.bind(this);\n    this.filterBy = this.filterBy.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  reset() {\n    this.setState({ ...this.state, devices: this.state.data });\n  }\n\n  // using ramda functions to sort the data by a key and save to the display array\n  sortBy(key) {\n    this.setState({\n      ...this.state,\n      devices: R.sortBy(R.prop(key), this.state.devices)\n    });\n  }\n\n  // use this for the filter\n  filterBy(key, value) {\n    this.setState({\n      ...this.state,\n      devices: R.filter(device => {\n        return device[key] === value;\n      }, this.state.data)\n    });\n  }\n\n  // basic login to retrieve data\n  login(values) {\n    const credentials = btoa(`${values.username}:${values.password}`);\n\n    axios\n      .get(url, {\n        headers: {\n          authorization: `Basic ${credentials}`\n        }\n      })\n      .then(\n        response => {\n          this.setState({\n            ...this.state,\n            data: response.data,\n            devices: response.data\n          });\n        },\n        error => {\n          alert(error);\n        }\n      );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.data && <Login login={this.login} />}\n        <Devices\n          devices={this.state.devices}\n          sortBy={this.sortBy}\n          filterBy={this.filterBy}\n          reset={this.reset}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}