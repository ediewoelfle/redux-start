{"ast":null,"code":"import _objectSpread from \"/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { Login } from \"./screens/Login\";\nimport { Devices } from \"./screens/Devices\";\nimport * as R from \"ramda\";\nimport axios from \"axios\";\nimport { login, newData } from \"./redux/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nconst url = \"http://localhost:3000/devices\";\n\nconst App = () => {\n  const logged = useSelector(state => state.loggedReducer);\n  const data = useSelector(state => state.dataReducer);\n  const dispatch = useDispatch();\n  let state = {\n    data: null,\n    devices: null\n  };\n\n  const reset = () => {\n    state = _objectSpread({}, state, {\n      devices: state.data\n    });\n  }; // using ramda functions to sort the data by a key and save to the display array\n\n\n  const sortBy = key => {\n    state = _objectSpread({}, state, {\n      devices: R.sortBy(R.prop(key), this.state.devices)\n    });\n  }; // use this for the filter\n\n\n  const filterBy = (key, value) => {\n    state = _objectSpread({}, state, {\n      devices: R.filter(device => {\n        return device[key] === value;\n      }, this.state.data)\n    });\n  }; // basic login to retrieve data\n\n\n  const signin = values => {\n    const credentials = btoa(\"\".concat(values.username, \":\").concat(values.password));\n    axios.get(url, {\n      headers: {\n        authorization: \"Basic \".concat(credentials)\n      }\n    }).then(response => {\n      dispatch(newData(response.data));\n      dispatch(login());\n    }, error => {\n      alert(error);\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, !logged && React.createElement(Login, {\n    login: signin,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(Devices, {\n    devices: data,\n    sortBy: sortBy,\n    filterBy: filterBy,\n    reset: reset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/src/App.js"],"names":["React","Login","Devices","R","axios","login","newData","useSelector","useDispatch","url","App","logged","state","loggedReducer","data","dataReducer","dispatch","devices","reset","sortBy","key","prop","filterBy","value","filter","device","signin","values","credentials","btoa","username","password","get","headers","authorization","then","response","error","alert"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,OAAhB,QAA+B,iBAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,MAAMC,GAAG,GAAG,+BAAZ;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAMC,MAAM,GAAGJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,aAAhB,CAA1B;AACA,QAAMC,IAAI,GAAGP,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACG,WAAhB,CAAxB;AACA,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AAEA,MAAII,KAAK,GAAG;AACVE,IAAAA,IAAI,EAAE,IADI;AAEVG,IAAAA,OAAO,EAAE;AAFC,GAAZ;;AAKA,QAAMC,KAAK,GAAG,MAAM;AAClBN,IAAAA,KAAK,qBAAQA,KAAR;AAAeK,MAAAA,OAAO,EAAEL,KAAK,CAACE;AAA9B,MAAL;AACD,GAFD,CAVgB,CAchB;;;AACA,QAAMK,MAAM,GAAGC,GAAG,IAAI;AACpBR,IAAAA,KAAK,qBACAA,KADA;AAEHK,MAAAA,OAAO,EAAEd,CAAC,CAACgB,MAAF,CAAShB,CAAC,CAACkB,IAAF,CAAOD,GAAP,CAAT,EAAsB,KAAKR,KAAL,CAAWK,OAAjC;AAFN,MAAL;AAID,GALD,CAfgB,CAsBhB;;;AACA,QAAMK,QAAQ,GAAG,CAACF,GAAD,EAAMG,KAAN,KAAgB;AAC/BX,IAAAA,KAAK,qBACAA,KADA;AAEHK,MAAAA,OAAO,EAAEd,CAAC,CAACqB,MAAF,CAASC,MAAM,IAAI;AAC1B,eAAOA,MAAM,CAACL,GAAD,CAAN,KAAgBG,KAAvB;AACD,OAFQ,EAEN,KAAKX,KAAL,CAAWE,IAFL;AAFN,MAAL;AAMD,GAPD,CAvBgB,CAgChB;;;AACA,QAAMY,MAAM,GAAGC,MAAM,IAAI;AACvB,UAAMC,WAAW,GAAGC,IAAI,WAAIF,MAAM,CAACG,QAAX,cAAuBH,MAAM,CAACI,QAA9B,EAAxB;AAEA3B,IAAAA,KAAK,CACF4B,GADH,CACOvB,GADP,EACY;AACRwB,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,kBAAWN,WAAX;AADN;AADD,KADZ,EAMGO,IANH,CAOIC,QAAQ,IAAI;AACVpB,MAAAA,QAAQ,CAACV,OAAO,CAAC8B,QAAQ,CAACtB,IAAV,CAAR,CAAR;AACAE,MAAAA,QAAQ,CAACX,KAAK,EAAN,CAAR;AACD,KAVL,EAWIgC,KAAK,IAAI;AACPC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACD,KAbL;AAeD,GAlBD;;AAoBA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC1B,MAAD,IAAW,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEe,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADd,EAEE,oBAAC,OAAD;AACE,IAAA,OAAO,EAAEZ,IADX;AAEE,IAAA,MAAM,EAAEK,MAFV;AAGE,IAAA,QAAQ,EAAEG,QAHZ;AAIE,IAAA,KAAK,EAAEJ,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAWD,CAhED;;AAkEA,eAAeR,GAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { Login } from \"./screens/Login\";\nimport { Devices } from \"./screens/Devices\";\nimport * as R from \"ramda\";\nimport axios from \"axios\";\nimport { login, newData } from \"./redux/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst url = \"http://localhost:3000/devices\";\n\nconst App = () => {\n  const logged = useSelector(state => state.loggedReducer);\n  const data = useSelector(state => state.dataReducer);\n  const dispatch = useDispatch();\n\n  let state = {\n    data: null,\n    devices: null\n  };\n\n  const reset = () => {\n    state = { ...state, devices: state.data };\n  };\n\n  // using ramda functions to sort the data by a key and save to the display array\n  const sortBy = key => {\n    state = {\n      ...state,\n      devices: R.sortBy(R.prop(key), this.state.devices)\n    };\n  };\n\n  // use this for the filter\n  const filterBy = (key, value) => {\n    state = {\n      ...state,\n      devices: R.filter(device => {\n        return device[key] === value;\n      }, this.state.data)\n    };\n  };\n\n  // basic login to retrieve data\n  const signin = values => {\n    const credentials = btoa(`${values.username}:${values.password}`);\n\n    axios\n      .get(url, {\n        headers: {\n          authorization: `Basic ${credentials}`\n        }\n      })\n      .then(\n        response => {\n          dispatch(newData(response.data));\n          dispatch(login());\n        },\n        error => {\n          alert(error);\n        }\n      );\n  };\n\n  return (\n    <div className=\"App\">\n      {!logged && <Login login={signin} />}\n      <Devices\n        devices={data}\n        sortBy={sortBy}\n        filterBy={filterBy}\n        reset={reset}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}