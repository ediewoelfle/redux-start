{"ast":null,"code":"var _jsxFileName = \"/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/src/screens/Devices.js\";\nimport React from \"react\";\nimport * as R from \"ramda\";\nimport { filter, reset, sort } from \"../redux/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nexport const Devices = () => {\n  const data = useSelector(state => state.dataReducer);\n  const dispatch = useDispatch();\n  console.log(\"data\", data);\n  if (!data) return null; // get a list of all the device properties we want to filter by\n\n  const firmwareVersions = R.uniq(devices.map(device => device.firmware_version));\n  const deviceIds = R.uniq(devices.map(device => device.device_id));\n\n  const renderFilterButton = (key, value) => {\n    return React.createElement(\"button\", {\n      key: value,\n      onClick: () => {\n        dispatch(filter(data, key, value));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, value);\n  };\n\n  return null; // return (\n  //   <>\n  //     <button\n  //       onClick={() => {\n  //         reset();\n  //       }}\n  //     >\n  //       RESET\n  //     </button>\n  //     {firmwareVersions.map(version =>\n  //       renderFilterButton(\"firmware_version\", version)\n  //     )}\n  //     {deviceIds.map(id => renderFilterButton(\"device_id\", id))}\n  //     <table>\n  //       <thead>\n  //         <tr>\n  //           <th>\n  //             <button\n  //               onClick={() => {\n  //                 sortBy(\"id\");\n  //               }}\n  //             >\n  //               #\n  //             </button>\n  //           </th>\n  //           <th>Device Id</th>\n  //           <th>Firmware</th>\n  //           <th>\n  //             <button\n  //               onClick={() => {\n  //                 sortBy(\"date_device_available\");\n  //               }}\n  //             >\n  //               Date Available\n  //             </button>\n  //           </th>\n  //           <th>\n  //             <button\n  //               onClick={() => {\n  //                 sortBy(\"battery_level\");\n  //               }}\n  //             >\n  //               Battery Level\n  //             </button>\n  //           </th>\n  //           <th>\n  //             <button\n  //               onClick={() => {\n  //                 sortBy(\"internal_temperature\");\n  //               }}\n  //             >\n  //               Temp\n  //             </button>\n  //           </th>\n  //         </tr>\n  //       </thead>\n  //       <tbody>\n  //         {devices.map(device => (\n  //           <DeviceRow key={device.id} device={device} />\n  //         ))}\n  //       </tbody>\n  //     </table>\n  //   </>\n  // );\n};\n\nconst DeviceRow = device => {\n  const _device$device = device.device,\n        battery_level = _device$device.battery_level,\n        date_device_available = _device$device.date_device_available,\n        device_id = _device$device.device_id,\n        firmware_version = _device$device.firmware_version,\n        id = _device$device.id,\n        internal_temperature = _device$device.internal_temperature;\n  return React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, id), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, device_id), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, firmware_version), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, date_device_available), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, battery_level), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, internal_temperature));\n};","map":{"version":3,"sources":["/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/src/screens/Devices.js"],"names":["React","R","filter","reset","sort","useSelector","useDispatch","Devices","data","state","dataReducer","dispatch","console","log","firmwareVersions","uniq","devices","map","device","firmware_version","deviceIds","device_id","renderFilterButton","key","value","DeviceRow","battery_level","date_device_available","id","internal_temperature"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;AAEA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,QAAoC,kBAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3B,QAAMC,IAAI,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,WAAhB,CAAxB;AACA,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBL,IAApB;AAEA,MAAI,CAACA,IAAL,EAAW,OAAO,IAAP,CALgB,CAO3B;;AAEA,QAAMM,gBAAgB,GAAGb,CAAC,CAACc,IAAF,CACvBC,OAAO,CAACC,GAAR,CAAYC,MAAM,IAAIA,MAAM,CAACC,gBAA7B,CADuB,CAAzB;AAIA,QAAMC,SAAS,GAAGnB,CAAC,CAACc,IAAF,CAAOC,OAAO,CAACC,GAAR,CAAYC,MAAM,IAAIA,MAAM,CAACG,SAA7B,CAAP,CAAlB;;AAEA,QAAMC,kBAAkB,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACzC,WACE;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,OAAO,EAAE,MAAM;AACbb,QAAAA,QAAQ,CAACT,MAAM,CAACM,IAAD,EAAOe,GAAP,EAAYC,KAAZ,CAAP,CAAR;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGA,KANH,CADF;AAUD,GAXD;;AAaA,SAAO,IAAP,CA5B2B,CA8B3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CA9FM;;AAgGP,MAAMC,SAAS,GAAGP,MAAM,IAAI;AAAA,yBAYtBA,MAAM,CAACA,MAZe;AAAA,QAIxBQ,aAJwB,kBAIxBA,aAJwB;AAAA,QAKxBC,qBALwB,kBAKxBA,qBALwB;AAAA,QAMxBN,SANwB,kBAMxBA,SANwB;AAAA,QAOxBF,gBAPwB,kBAOxBA,gBAPwB;AAAA,QAQxBS,EARwB,kBAQxBA,EARwB;AAAA,QASxBC,oBATwB,kBASxBA,oBATwB;AAa1B,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,EAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKP,SAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKF,gBAAL,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKQ,qBAAL,CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,aAAL,CALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKG,oBAAL,CANF,CADF;AAUD,CAvBD","sourcesContent":["import React from \"react\";\nimport * as R from \"ramda\";\n\nimport { filter, reset, sort } from \"../redux/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport const Devices = () => {\n  const data = useSelector(state => state.dataReducer);\n  const dispatch = useDispatch();\n  console.log(\"data\", data);\n\n  if (!data) return null;\n\n  // get a list of all the device properties we want to filter by\n\n  const firmwareVersions = R.uniq(\n    devices.map(device => device.firmware_version)\n  );\n\n  const deviceIds = R.uniq(devices.map(device => device.device_id));\n\n  const renderFilterButton = (key, value) => {\n    return (\n      <button\n        key={value}\n        onClick={() => {\n          dispatch(filter(data, key, value));\n        }}\n      >\n        {value}\n      </button>\n    );\n  };\n\n  return null;\n\n  // return (\n  //   <>\n  //     <button\n  //       onClick={() => {\n  //         reset();\n  //       }}\n  //     >\n  //       RESET\n  //     </button>\n  //     {firmwareVersions.map(version =>\n  //       renderFilterButton(\"firmware_version\", version)\n  //     )}\n  //     {deviceIds.map(id => renderFilterButton(\"device_id\", id))}\n  //     <table>\n  //       <thead>\n  //         <tr>\n  //           <th>\n  //             <button\n  //               onClick={() => {\n  //                 sortBy(\"id\");\n  //               }}\n  //             >\n  //               #\n  //             </button>\n  //           </th>\n  //           <th>Device Id</th>\n  //           <th>Firmware</th>\n  //           <th>\n  //             <button\n  //               onClick={() => {\n  //                 sortBy(\"date_device_available\");\n  //               }}\n  //             >\n  //               Date Available\n  //             </button>\n  //           </th>\n  //           <th>\n  //             <button\n  //               onClick={() => {\n  //                 sortBy(\"battery_level\");\n  //               }}\n  //             >\n  //               Battery Level\n  //             </button>\n  //           </th>\n  //           <th>\n  //             <button\n  //               onClick={() => {\n  //                 sortBy(\"internal_temperature\");\n  //               }}\n  //             >\n  //               Temp\n  //             </button>\n  //           </th>\n  //         </tr>\n  //       </thead>\n  //       <tbody>\n  //         {devices.map(device => (\n  //           <DeviceRow key={device.id} device={device} />\n  //         ))}\n  //       </tbody>\n  //     </table>\n  //   </>\n  // );\n};\n\nconst DeviceRow = device => {\n  const {\n    // application_code,\n    // asset_identifier,\n    battery_level,\n    date_device_available,\n    device_id,\n    firmware_version,\n    id,\n    internal_temperature\n    // manufacturer,\n    // status\n  } = device.device;\n  return (\n    <tr>\n      <td>{id}</td>\n      <td>{device_id}</td>\n      <td>{firmware_version}</td>\n      <td>{date_device_available}</td>\n      <td>{battery_level}</td>\n      <td>{internal_temperature}</td>\n    </tr>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}