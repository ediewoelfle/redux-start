{"ast":null,"code":"var _jsxFileName = \"/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { Login } from \"./screens/Login\";\nimport { Devices } from \"./screens/Devices\";\nimport * as R from \"ramda\";\nimport axios from \"axios\";\nimport { userSelector } from \"react-redux\";\nconst url = \"http://localhost:3000/devices\";\n\nclass App extends React.Component {\n  // constructor(props) {\n  //   super(props);\n  //   // holding for two arrays, one for display and one with the original data. Thinking of a better way to do this. --EdieDanger\n  //   this.state = {\n  //     data: null,\n  //     devices: null\n  //   };\n  //   this.sortBy = this.sortBy.bind(this);\n  //   this.login = this.login.bind(this);\n  //   this.filterBy = this.filterBy.bind(this);\n  //   this.reset = this.reset.bind(this);\n  // }\n  // reset() {\n  //   this.setState({ ...this.state, devices: this.state.data });\n  // }\n  // // using ramda functions to sort the data by a key and save to the display array\n  // sortBy(key) {\n  //   this.setState({\n  //     ...this.state,\n  //     devices: R.sortBy(R.prop(key), this.state.devices)\n  //   });\n  // }\n  // // use this for the filter\n  // filterBy(key, value) {\n  //   this.setState({\n  //     ...this.state,\n  //     devices: R.filter(device => {\n  //       return device[key] === value;\n  //     }, this.state.data)\n  //   });\n  // }\n  // // basic login to retrieve data\n  // login(values) {\n  //   const credentials = btoa(`${values.username}:${values.password}`);\n  //   axios\n  //     .get(url, {\n  //       headers: {\n  //         authorization: `Basic ${credentials}`\n  //       }\n  //     })\n  //     .then(\n  //       response => {\n  //         this.setState({\n  //           ...this.state,\n  //           data: response.data,\n  //           devices: response.data\n  //         });\n  //       },\n  //       error => {\n  //         alert(error);\n  //       }\n  //     );\n  // }\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, !this.state.data && React.createElement(Login, {\n      login: this.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(Devices, {\n      devices: this.state.devices,\n      sortBy: this.sortBy,\n      filterBy: this.filterBy,\n      reset: this.reset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/src/App.js"],"names":["React","Login","Devices","R","axios","userSelector","url","App","Component","render","state","data","login","devices","sortBy","filterBy","reset"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,aAA7B;AAEA,MAAMC,GAAG,GAAG,+BAAZ;;AAEA,MAAMC,GAAN,SAAkBP,KAAK,CAACQ,SAAxB,CAAkC;AAChC;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC,KAAKC,KAAL,CAAWC,IAAZ,IAAoB,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,KAAKC,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADvB,EAEE,oBAAC,OAAD;AACE,MAAA,OAAO,EAAE,KAAKF,KAAL,CAAWG,OADtB;AAEE,MAAA,MAAM,EAAE,KAAKC,MAFf;AAGE,MAAA,QAAQ,EAAE,KAAKC,QAHjB;AAIE,MAAA,KAAK,EAAE,KAAKC,KAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAWD;;AA1E+B;;AA6ElC,eAAeT,GAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { Login } from \"./screens/Login\";\nimport { Devices } from \"./screens/Devices\";\nimport * as R from \"ramda\";\nimport axios from \"axios\";\nimport { userSelector } from \"react-redux\";\n\nconst url = \"http://localhost:3000/devices\";\n\nclass App extends React.Component {\n  // constructor(props) {\n  //   super(props);\n\n  //   // holding for two arrays, one for display and one with the original data. Thinking of a better way to do this. --EdieDanger\n  //   this.state = {\n  //     data: null,\n  //     devices: null\n  //   };\n\n  //   this.sortBy = this.sortBy.bind(this);\n  //   this.login = this.login.bind(this);\n  //   this.filterBy = this.filterBy.bind(this);\n  //   this.reset = this.reset.bind(this);\n  // }\n\n  // reset() {\n  //   this.setState({ ...this.state, devices: this.state.data });\n  // }\n\n  // // using ramda functions to sort the data by a key and save to the display array\n  // sortBy(key) {\n  //   this.setState({\n  //     ...this.state,\n  //     devices: R.sortBy(R.prop(key), this.state.devices)\n  //   });\n  // }\n\n  // // use this for the filter\n  // filterBy(key, value) {\n  //   this.setState({\n  //     ...this.state,\n  //     devices: R.filter(device => {\n  //       return device[key] === value;\n  //     }, this.state.data)\n  //   });\n  // }\n\n  // // basic login to retrieve data\n  // login(values) {\n  //   const credentials = btoa(`${values.username}:${values.password}`);\n\n  //   axios\n  //     .get(url, {\n  //       headers: {\n  //         authorization: `Basic ${credentials}`\n  //       }\n  //     })\n  //     .then(\n  //       response => {\n  //         this.setState({\n  //           ...this.state,\n  //           data: response.data,\n  //           devices: response.data\n  //         });\n  //       },\n  //       error => {\n  //         alert(error);\n  //       }\n  //     );\n  // }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.data && <Login login={this.login} />}\n        <Devices\n          devices={this.state.devices}\n          sortBy={this.sortBy}\n          filterBy={this.filterBy}\n          reset={this.reset}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}