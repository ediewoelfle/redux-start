{"ast":null,"code":"var _jsxFileName = \"/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { Login } from \"./screens/Login\";\nimport { Devices } from \"./screens/Devices\";\nimport * as R from \"ramda\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\nimport { loggedReducer } from \"./redux/reducers/loggedReducer\";\nconst url = \"http://localhost:3000/devices\";\n\nconst App = () => {\n  const logged = useSelector(state => state.loggedReducer);\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"LOGGED: \", logged));\n}; // class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     // holding for two arrays, one for display and one with the original data. Thinking of a better way to do this. --EdieDanger\n//     this.state = {\n//       data: null,\n//       devices: null\n//     };\n//     this.sortBy = this.sortBy.bind(this);\n//     this.login = this.login.bind(this);\n//     this.filterBy = this.filterBy.bind(this);\n//     this.reset = this.reset.bind(this);\n//   }\n//   reset() {\n//     this.setState({ ...this.state, devices: this.state.data });\n//   }\n//   // using ramda functions to sort the data by a key and save to the display array\n//   sortBy(key) {\n//     this.setState({\n//       ...this.state,\n//       devices: R.sortBy(R.prop(key), this.state.devices)\n//     });\n//   }\n//   // use this for the filter\n//   filterBy(key, value) {\n//     this.setState({\n//       ...this.state,\n//       devices: R.filter(device => {\n//         return device[key] === value;\n//       }, this.state.data)\n//     });\n//   }\n//   // basic login to retrieve data\n//   login(values) {\n//     const credentials = btoa(`${values.username}:${values.password}`);\n//     axios\n//       .get(url, {\n//         headers: {\n//           authorization: `Basic ${credentials}`\n//         }\n//       })\n//       .then(\n//         response => {\n//           this.setState({\n//             ...this.state,\n//             data: response.data,\n//             devices: response.data\n//           });\n//         },\n//         error => {\n//           alert(error);\n//         }\n//       );\n//   }\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         {!this.state.data && <Login login={this.login} />}\n//         <Devices\n//           devices={this.state.devices}\n//           sortBy={this.sortBy}\n//           filterBy={this.filterBy}\n//           reset={this.reset}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n\nexport default App;","map":{"version":3,"sources":["/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/src/App.js"],"names":["React","Login","Devices","R","axios","useSelector","loggedReducer","url","App","logged","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAT,QAA8B,gCAA9B;AAEA,MAAMC,GAAG,GAAG,+BAAZ;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAMC,MAAM,GAAGJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACJ,aAAhB,CAA1B;AACA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAaG,MAAb,CADF,CADF;AAKD,CAPD,C,CASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeD,GAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { Login } from \"./screens/Login\";\nimport { Devices } from \"./screens/Devices\";\nimport * as R from \"ramda\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\nimport { loggedReducer } from \"./redux/reducers/loggedReducer\";\n\nconst url = \"http://localhost:3000/devices\";\n\nconst App = () => {\n  const logged = useSelector(state => state.loggedReducer);\n  return (\n    <div className=\"App\">\n      <h1>LOGGED: {logged}</h1>\n    </div>\n  );\n};\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n\n//     // holding for two arrays, one for display and one with the original data. Thinking of a better way to do this. --EdieDanger\n//     this.state = {\n//       data: null,\n//       devices: null\n//     };\n\n//     this.sortBy = this.sortBy.bind(this);\n//     this.login = this.login.bind(this);\n//     this.filterBy = this.filterBy.bind(this);\n//     this.reset = this.reset.bind(this);\n//   }\n\n//   reset() {\n//     this.setState({ ...this.state, devices: this.state.data });\n//   }\n\n//   // using ramda functions to sort the data by a key and save to the display array\n//   sortBy(key) {\n//     this.setState({\n//       ...this.state,\n//       devices: R.sortBy(R.prop(key), this.state.devices)\n//     });\n//   }\n\n//   // use this for the filter\n//   filterBy(key, value) {\n//     this.setState({\n//       ...this.state,\n//       devices: R.filter(device => {\n//         return device[key] === value;\n//       }, this.state.data)\n//     });\n//   }\n\n//   // basic login to retrieve data\n//   login(values) {\n//     const credentials = btoa(`${values.username}:${values.password}`);\n\n//     axios\n//       .get(url, {\n//         headers: {\n//           authorization: `Basic ${credentials}`\n//         }\n//       })\n//       .then(\n//         response => {\n//           this.setState({\n//             ...this.state,\n//             data: response.data,\n//             devices: response.data\n//           });\n//         },\n//         error => {\n//           alert(error);\n//         }\n//       );\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         {!this.state.data && <Login login={this.login} />}\n//         <Devices\n//           devices={this.state.devices}\n//           sortBy={this.sortBy}\n//           filterBy={this.filterBy}\n//           reset={this.reset}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}