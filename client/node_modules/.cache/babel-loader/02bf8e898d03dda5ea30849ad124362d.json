{"ast":null,"code":"import _objectSpread from \"/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { Login } from \"./screens/Login\";\nimport { Devices } from \"./screens/Devices\";\nimport * as R from \"ramda\";\nimport axios from \"axios\";\nimport { login } from \"./redux/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nconst url = \"http://localhost:3000/devices\";\n\nconst App = () => {\n  const logged = useSelector(state => state.loggedReducer);\n  console.log(\"logged\", logged);\n  const dispatch = useDispatch();\n  let state = {\n    data: null,\n    devices: null\n  };\n\n  const reset = () => {\n    state = _objectSpread({}, state, {\n      devices: state.data\n    });\n  }; // using ramda functions to sort the data by a key and save to the display array\n\n\n  const sortBy = key => {\n    state = _objectSpread({}, state, {\n      devices: R.sortBy(R.prop(key), this.state.devices)\n    });\n  }; // use this for the filter\n\n\n  const filterBy = (key, value) => {\n    state = _objectSpread({}, state, {\n      devices: R.filter(device => {\n        return device[key] === value;\n      }, this.state.data)\n    });\n  }; // basic login to retrieve data\n\n\n  const signin = values => {\n    const credentials = btoa(\"\".concat(values.username, \":\").concat(values.password));\n    console.log(\"credentials\", credentials);\n    axios.get(url, {\n      headers: {\n        authorization: \"Basic \".concat(credentials)\n      }\n    }).then(response => {\n      state = _objectSpread({}, state, {\n        data: response.data,\n        devices: response.data\n      });\n      dispatch(login());\n    }, error => {\n      alert(error);\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, !state.data && React.createElement(Login, {\n    login: signin,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(Devices, {\n    devices: state.devices,\n    sortBy: sortBy,\n    filterBy: filterBy,\n    reset: reset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/ediewoelfle/Developer/radiotrax-code-challenge/client/src/App.js"],"names":["React","Login","Devices","R","axios","login","useSelector","useDispatch","url","App","logged","state","loggedReducer","console","log","dispatch","data","devices","reset","sortBy","key","prop","filterBy","value","filter","device","signin","values","credentials","btoa","username","password","get","headers","authorization","then","response","error","alert"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { Login } from \"./screens/Login\";\nimport { Devices } from \"./screens/Devices\";\nimport * as R from \"ramda\";\nimport axios from \"axios\";\nimport { login } from \"./redux/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst url = \"http://localhost:3000/devices\";\n\nconst App = () => {\n  const logged = useSelector(state => state.loggedReducer);\n  console.log(\"logged\", logged);\n  const dispatch = useDispatch();\n\n  let state = {\n    data: null,\n    devices: null\n  };\n\n  const reset = () => {\n    state = { ...state, devices: state.data };\n  };\n\n  // using ramda functions to sort the data by a key and save to the display array\n  const sortBy = key => {\n    state = {\n      ...state,\n      devices: R.sortBy(R.prop(key), this.state.devices)\n    };\n  };\n\n  // use this for the filter\n  const filterBy = (key, value) => {\n    state = {\n      ...state,\n      devices: R.filter(device => {\n        return device[key] === value;\n      }, this.state.data)\n    };\n  };\n\n  // basic login to retrieve data\n  const signin = values => {\n    const credentials = btoa(`${values.username}:${values.password}`);\n\n    console.log(\"credentials\", credentials);\n\n    axios\n      .get(url, {\n        headers: {\n          authorization: `Basic ${credentials}`\n        }\n      })\n      .then(\n        response => {\n          state = {\n            ...state,\n            data: response.data,\n            devices: response.data\n          };\n\n          dispatch(login());\n        },\n        error => {\n          alert(error);\n        }\n      );\n  };\n\n  return (\n    <div className=\"App\">\n      {!state.data && <Login login={signin} />}\n      <Devices\n        devices={state.devices}\n        sortBy={sortBy}\n        filterBy={filterBy}\n        reset={reset}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}